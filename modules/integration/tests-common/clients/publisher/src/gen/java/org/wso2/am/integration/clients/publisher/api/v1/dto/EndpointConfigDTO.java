/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.wso2.am.integration.clients.publisher.api.v1.dto.EndpointConfigAttributesDTO;

/**
 * EndpointConfigDTO
 */

public class EndpointConfigDTO {
  @SerializedName("url")
  private String url = null;

  @SerializedName("timeout")
  private String timeout = null;

  @SerializedName("attributes")
  private List<EndpointConfigAttributesDTO> attributes = null;

  public EndpointConfigDTO url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Service url of the endpoint 
   * @return url
  **/
  @ApiModelProperty(example = "http://localhost:8280", value = "Service url of the endpoint ")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public EndpointConfigDTO timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Time out of the endpoint 
   * @return timeout
  **/
  @ApiModelProperty(example = "1000", value = "Time out of the endpoint ")
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }

  public EndpointConfigDTO attributes(List<EndpointConfigAttributesDTO> attributes) {
    this.attributes = attributes;
    return this;
  }

  public EndpointConfigDTO addAttributesItem(EndpointConfigAttributesDTO attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @ApiModelProperty(value = "")
  public List<EndpointConfigAttributesDTO> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<EndpointConfigAttributesDTO> attributes) {
    this.attributes = attributes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointConfigDTO endpointConfig = (EndpointConfigDTO) o;
    return Objects.equals(this.url, endpointConfig.url) &&
        Objects.equals(this.timeout, endpointConfig.timeout) &&
        Objects.equals(this.attributes, endpointConfig.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, timeout, attributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointConfigDTO {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

