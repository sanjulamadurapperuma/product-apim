<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://ws.apache.org/ns/synapse">
    <registry provider="org.wso2.carbon.mediation.registry.WSO2Registry">
        <parameter name="cachableDuration">15000</parameter>
    </registry>
    <proxy name="WorkflowCallbackService" startOnLoad="true"
           trace="disable" transports="https http">
        <description/>
        <target>
            <inSequence>
                <property name="messageType" scope="axis2" type="STRING" value="application/x-www-form-urlencoded"/>
                <send>
                    <endpoint>
                        <address format="rest" uri="https://localhost:9443/store-old/site/blocks/workflow/workflow-listener/ajax/workflow-listener.jag"/>
                    </endpoint>
                </send>
            </inSequence>
            <outSequence>
                <property name="messageType" scope="axis2" type="STRING" value="text/xml"/>
                <send/>
            </outSequence>
        </target>
        <publishWSDL>
            <wsdl:definitions
                    targetNamespace="http://callback.workflow.apimgt.carbon.wso2.org"
                    xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
                    xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
                    xmlns:ns="http://callback.workflow.apimgt.carbon.wso2.org"
                    xmlns:ns1="http://org.apache.axis2/xsd"
                    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                    xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
                    xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl"
                    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <wsdl:documentation>WorkflowCallbackService</wsdl:documentation>
                <wsdl:types>
                    <xs:schema attributeFormDefault="qualified"
                               elementFormDefault="qualified" targetNamespace="http://callback.workflow.apimgt.carbon.wso2.org">
                        <xs:element name="resumeEvent">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element minOccurs="0"
                                                name="workflowReference"
                                                nillable="true" type="xs:string"/>
                                    <xs:element minOccurs="0"
                                                name="status" nillable="true" type="xs:string"/>
                                    <xs:element minOccurs="0"
                                                name="description"
                                                nillable="true" type="xs:string"/>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="resumeEventResponse">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element minOccurs="0"
                                                name="return" nillable="true" type="xs:string"/>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:schema>
                </wsdl:types>
                <wsdl:message name="resumeEventRequest">
                    <wsdl:part element="ns:resumeEvent" name="parameters"/>
                </wsdl:message>
                <wsdl:message name="resumeEventResponse">
                    <wsdl:part element="ns:resumeEventResponse" name="parameters"/>
                </wsdl:message>
                <wsdl:portType name="WorkflowCallbackServicePortType">
                    <wsdl:operation name="resumeEvent">
                        <wsdl:input message="ns:resumeEventRequest" wsaw:Action="urn:resumeEvent"/>
                        <wsdl:output message="ns:resumeEventResponse" wsaw:Action="urn:resumeEventResponse"/>
                    </wsdl:operation>
                </wsdl:portType>
                <wsdl:binding
                        name="WorkflowCallbackServiceSoap11Binding" type="ns:WorkflowCallbackServicePortType">
                    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
                    <wsdl:operation name="resumeEvent">
                        <soap:operation soapAction="urn:resumeEvent" style="document"/>
                        <wsdl:input>
                            <soap:body use="literal"/>
                        </wsdl:input>
                        <wsdl:output>
                            <soap:body use="literal"/>
                        </wsdl:output>
                    </wsdl:operation>
                </wsdl:binding>
                <wsdl:binding
                        name="WorkflowCallbackServiceSoap12Binding" type="ns:WorkflowCallbackServicePortType">
                    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
                    <wsdl:operation name="resumeEvent">
                        <soap12:operation soapAction="urn:resumeEvent" style="document"/>
                        <wsdl:input>
                            <soap12:body use="literal"/>
                        </wsdl:input>
                        <wsdl:output>
                            <soap12:body use="literal"/>
                        </wsdl:output>
                    </wsdl:operation>
                </wsdl:binding>
                <wsdl:binding name="WorkflowCallbackServiceHttpBinding" type="ns:WorkflowCallbackServicePortType">
                    <http:binding verb="POST"/>
                    <wsdl:operation name="resumeEvent">
                        <http:operation location="resumeEvent"/>
                        <wsdl:input>
                            <mime:content part="parameters" type="text/xml"/>
                        </wsdl:input>
                        <wsdl:output>
                            <mime:content part="parameters" type="text/xml"/>
                        </wsdl:output>
                    </wsdl:operation>
                </wsdl:binding>
                <wsdl:service name="WorkflowCallbackService">
                    <wsdl:port
                            binding="ns:WorkflowCallbackServiceSoap11Binding" name="WorkflowCallbackServiceHttpsSoap11Endpoint">
                        <soap:address location="https://localhost:8243/services/WorkflowCallbackService.WorkflowCallbackServiceHttpsSoap11Endpoint/"/>
                    </wsdl:port>
                    <wsdl:port
                            binding="ns:WorkflowCallbackServiceSoap11Binding" name="WorkflowCallbackServiceHttpSoap11Endpoint">
                        <soap:address location="http://localhost:8280/services/WorkflowCallbackService.WorkflowCallbackServiceHttpSoap11Endpoint/"/>
                    </wsdl:port>
                    <wsdl:port
                            binding="ns:WorkflowCallbackServiceSoap12Binding" name="WorkflowCallbackServiceHttpsSoap12Endpoint">
                        <soap12:address location="https://localhost:8243/services/WorkflowCallbackService.WorkflowCallbackServiceHttpsSoap12Endpoint/"/>
                    </wsdl:port>
                    <wsdl:port
                            binding="ns:WorkflowCallbackServiceSoap12Binding" name="WorkflowCallbackServiceHttpSoap12Endpoint">
                        <soap12:address location="http://localhost:8280/services/WorkflowCallbackService.WorkflowCallbackServiceHttpSoap12Endpoint/"/>
                    </wsdl:port>
                    <wsdl:port
                            binding="ns:WorkflowCallbackServiceHttpBinding" name="WorkflowCallbackServiceHttpsEndpoint">
                        <http:address location="https://localhost:8243/services/WorkflowCallbackService.WorkflowCallbackServiceHttpsEndpoint/"/>
                    </wsdl:port>
                    <wsdl:port
                            binding="ns:WorkflowCallbackServiceHttpBinding" name="WorkflowCallbackServiceHttpEndpoint">
                        <http:address location="http://localhost:8280/services/WorkflowCallbackService.WorkflowCallbackServiceHttpEndpoint/"/>
                    </wsdl:port>
                </wsdl:service>
            </wsdl:definitions>
        </publishWSDL>
    </proxy>
    <sequence name="_production_key_error_">
        <property name="ERROR_CODE" value="900901"/>
        <property name="ERROR_MESSAGE" value="Production key offered to the API with no production endpoint"/>
        <property name="CUSTOM_HTTP_SC" value="403"/>
        <sequence key="fault"/>
    </sequence>
    <sequence name="_build_">
        <builder>
            <messageBuilder
                    class="org.apache.axis2.builder.ApplicationXMLBuilder"
                    contentType="application/xml" formatterClass="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
            <messageBuilder class="org.apache.axis2.builder.MTOMBuilder" contentType="application/xop+xml"/>
            <messageBuilder class="org.apache.axis2.builder.MIMEBuilder" contentType="multipart/related"/>
            <messageBuilder class="org.apache.axis2.json.JSONBuilder"
                            contentType="application/json" formatterClass="org.apache.axis2.json.JSONMessageFormatter"/>
            <messageBuilder
                    class="org.apache.axis2.builder.XFormURLEncodedBuilder"
                    contentType="application/x-www-form-urlencoded" formatterClass="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
            <messageBuilder class="org.apache.axis2.builder.SOAPBuilder"
                            contentType="text/xml" formatterClass="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
            <messageBuilder class="org.apache.axis2.builder.SOAPBuilder"
                            contentType="application/soap+xml" formatterClass="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
        </builder>
    </sequence>
    <sequence name="_token_fault_">
        <log level="custom">
            <property name="STATUS" value="Executing token 'fault' sequence"/>
            <property expression="get-property('ERROR_CODE')" name="ERROR_CODE"/>
            <property expression="get-property('ERROR_MESSAGE')" name="ERROR_MESSAGE"/>
        </log>
        <payloadFactory media-type="xml">
            <format>
                <am:fault xmlns:am="http://wso2.org/apimanager">
                    <am:code>$1</am:code>
                    <am:type>Status report</am:type>
                    <am:message>Runtime Error</am:message>
                    <am:description>$2</am:description>
                </am:fault>
            </format>
            <args>
                <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
            </args>
        </payloadFactory>
        <filter xpath="$ctx:CUSTOM_HTTP_SC">
            <then>
                <property expression="$ctx:CUSTOM_HTTP_SC"
                          name="HTTP_SC" scope="axis2"/>
            </then>
            <else>
                <property name="HTTP_SC" scope="axis2" value="500"/>
            </else>
        </filter>
        <property name="RESPONSE" value="true"/>
        <header action="remove" name="To"/>
        <property action="remove" name="NO_ENTITY_BODY" scope="axis2"/>
        <property action="remove" name="ContentType" scope="axis2"/>
        <property action="remove" name="Authorization" scope="transport"/>
        <property action="remove" name="Host" scope="transport"/>
        <property action="remove" name="Accept" scope="transport"/>
        <property name="messageType" scope="axis2" value="application/xml"/>
        <sequence key="_cors_request_handler_"/>
        <send/>
        <drop/>
    </sequence>
    <sequence name="_cors_request_handler_">
        <filter regex="true" source="$ctx:CORSConfiguration.Enabled">
            <then>
                <filter regex="false" source="boolean($trp:Access-Control-Allow-Origin)">
                    <then>
                        <property
                                expression="$ctx:Access-Control-Allow-Origin"
                                name="Access-Control-Allow-Origin"
                                scope="transport" type="STRING"/>
                    </then>
                </filter>
                <filter regex="false" source="boolean($trp:Access-Control-Allow-Methods)">
                    <then>
                        <property
                                expression="$ctx:Access-Control-Allow-Methods"
                                name="Access-Control-Allow-Methods"
                                scope="transport" type="STRING"/>
                    </then>
                </filter>
                <filter regex="false" source="boolean($trp:Access-Control-Allow-Headers)">
                    <then>
                        <property
                                expression="$ctx:Access-Control-Allow-Headers"
                                name="Access-Control-Allow-Headers"
                                scope="transport" type="STRING"/>
                    </then>
                </filter>
                <filter regex="false" source="boolean($trp:Access-Control-Allow-Credentials)">
                    <then>
                        <filter regex="true" source="boolean($ctx:Access-Control-Allow-Credentials)">
                            <then>
                                <property
                                        expression="$ctx:Access-Control-Allow-Credentials"
                                        name="Access-Control-Allow-Credentials"
                                        scope="transport" type="STRING"/>
                            </then>
                        </filter>
                    </then>
                </filter>
            </then>
        </filter>
    </sequence>
    <sequence name="_resource_mismatch_handler_">
        <property name="ERROR_CODE" value="403"/>
        <property name="ERROR_MESSAGE" value="No matching resource found in the API for the given request"/>
        <property name="CUSTOM_HTTP_SC" value="403"/>
        <sequence key="fault"/>
    </sequence>
    <sequence name="fault">
        <log level="custom">
            <property name="STATUS" value="Executing default 'fault' sequence"/>
            <property expression="get-property('ERROR_CODE')" name="ERROR_CODE"/>
            <property expression="get-property('ERROR_MESSAGE')" name="ERROR_MESSAGE"/>
        </log>
        <filter regex="soap1[1-2]" source="get-property('MESSAGE_FORMAT')">
            <then>
                <property name="SOAP_FAULT_CODE" value="Server"/>
                <makefault version="soap11">
                    <code expression="$ctx:SOAP_FAULT_CODE"/>
                    <reason expression="$ctx:ERROR_MESSAGE"/>
                </makefault>
            </then>
            <else>
                <payloadFactory media-type="xml">
                    <format>
                        <am:fault xmlns:am="http://wso2.org/apimanager">
                            <am:code>$1</am:code>
                            <am:type>Status report</am:type>
                            <am:message>Runtime Error</am:message>
                            <am:description>$2</am:description>
                        </am:fault>
                    </format>
                    <args>
                        <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                        <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    </args>
                </payloadFactory>
                <filter regex="^(?!.*(POST|PUT|PATCH)).*$" source="$axis2:HTTP_METHOD">
                    <property name="messageType" scope="axis2" value="application/xml"/>
                </filter>
            </else>
        </filter>
        <filter xpath="$ctx:CUSTOM_HTTP_SC">
            <then>
                <property expression="$ctx:CUSTOM_HTTP_SC"
                          name="HTTP_SC" scope="axis2"/>
            </then>
            <else>
                <property name="HTTP_SC" scope="axis2" value="500"/>
            </else>
        </filter>
        <class name="org.wso2.carbon.apimgt.gateway.handlers.analytics.APIMgtFaultHandler"/>
        <property name="RESPONSE" value="true"/>
        <header action="remove" name="To"/>
        <property action="remove" name="NO_ENTITY_BODY" scope="axis2"/>
        <property action="remove" name="ContentType" scope="axis2"/>
        <property action="remove" name="Authorization" scope="transport"/>
        <property action="remove" name="Host" scope="transport"/>
        <property action="remove" name="Accept" scope="transport"/>
        <property action="remove" name="X-JWT-Assertion" scope="transport"/>
        <sequence key="_cors_request_handler_"/>
        <send/>
    </sequence>
    <sequence name="_auth_failure_handler_">
        <property name="error_message_type" value="application/xml"/>
        <sequence key="_cors_request_handler_"/>
    </sequence>
    <sequence name="_throttle_out_handler_">
        <property action="remove" name="X-JWT-Assertion" scope="transport"/>
        <class name="org.wso2.carbon.apimgt.gateway.handlers.analytics.APIMgtThrottleUsageHandler"/>
        <sequence key="_cors_request_handler_"/>
    </sequence>
    <sequence name="_sandbox_key_error_">
        <property name="ERROR_CODE" value="900901"/>
        <property name="ERROR_MESSAGE" value="Sandbox key offered to the API with no sandbox endpoint"/>
        <property name="CUSTOM_HTTP_SC" value="403"/>
        <sequence key="fault"/>
    </sequence>
    <sequence name="main">
        <in>
            <log level="custom">
                <property name="STATUS" value="Message dispatched to the main sequence. Invalid URL."/>
                <property
                        expression="fn:concat('/', $axis2:REST_URL_POSTFIX)" name="RESOURCE"/>
            </log>
            <filter regex="true" source="$ctx:TRANSPORT_DENIED">
                <payloadFactory media-type="xml">
                    <format>
                        <am:fault xmlns:am="http://wso2.org/apimanager">
                            <am:code>403</am:code>
                            <am:type>Status report</am:type>
                            <am:message>Forbidden</am:message>
                            <am:description>Unsupported Transport [ $2 ]. The requested resource (/$1) is not available.</am:description>
                        </am:fault>
                    </format>
                    <args>
                        <arg evaluator="xml" expression="$axis2:REST_URL_POSTFIX"/>
                        <arg evaluator="xml" expression="$ctx:IN_TRANSPORT"/>
                    </args>
                </payloadFactory>
                <property name="HTTP_SC" scope="axis2" value="403"/>
                <property name="RESPONSE" value="true"/>
                <header action="remove" name="To"/>
                <property action="remove" name="NO_ENTITY_BODY" scope="axis2"/>
                <property action="remove" name="ContentType" scope="axis2"/>
                <property action="remove" name="Authorization" scope="transport"/>
                <property action="remove" name="Host" scope="transport"/>
                <property action="remove" name="Accept" scope="transport"/>
                <send/>
                <drop/>
            </filter>
            <filter regex="soap1[1-2]" source="get-property('MESSAGE_FORMAT')">
                <then>
                    <property name="SOAP_FAULT_CODE" value="Server"/>
                    <makefault version="soap11">
                        <code expression="$ctx:SOAP_FAULT_CODE"/>
                        <reason value="The requested endpoint is not available."/>
                    </makefault>
                </then>
                <else>
                    <payloadFactory media-type="xml">
                        <format>
                            <am:fault xmlns:am="http://wso2.org/apimanager">
                                <am:code>404</am:code>
                                <am:type>Status report</am:type>
                                <am:message>Not Found</am:message>
                                <am:description>The requested resource (/$1) is not available.</am:description>
                            </am:fault>
                        </format>
                        <args>
                            <arg evaluator="xml" expression="$axis2:REST_URL_POSTFIX"/>
                        </args>
                    </payloadFactory>
                </else>
            </filter>
            <filter regex="^(?!.*(POST|PUT|PATCH)).*$" source="$axis2:HTTP_METHOD">
                <property name="messageType" scope="axis2" value="application/xml"/>
            </filter>
            <property name="HTTP_SC" scope="axis2" value="404"/>
            <property name="RESPONSE" value="true"/>
            <header action="remove" name="To"/>
            <property action="remove" name="NO_ENTITY_BODY" scope="axis2"/>
            <property action="remove" name="ContentType" scope="axis2"/>
            <property action="remove" name="Authorization" scope="transport"/>
            <property action="remove" name="Host" scope="transport"/>
            <property action="remove" name="Accept" scope="transport"/>
            <property action="remove" name="X-JWT-Assertion" scope="transport"/>
            <send/>
            <drop/>
        </in>
        <out>
            <log level="full">
                <property name="STATUS" value="Unexpected response message in out flow"/>
            </log>
            <drop/>
        </out>
        <description>The default main sequence for API manager - Returns 404 Not Found</description>
    </sequence>
    <api context="/token" name="_WSO2AMTokenAPI_">
        <resource faultSequence="_token_fault_" methods="POST" url-mapping="/*">
            <inSequence>
                <property expression="get-property('keyManager.port')" name="uri.var.portnum"/>
                <property
                        expression="get-property('keyManager.hostname')" name="uri.var.hostname"/>
                <send>
                    <endpoint>
                        <http uri-template="https://{uri.var.hostname}:{uri.var.portnum}/oauth2/token">
                            <timeout>
                                <duration>60000</duration>
                                <responseAction>fault</responseAction>
                            </timeout>
                        </http>
                    </endpoint>
                </send>
            </inSequence>
            <outSequence>
                <send/>
            </outSequence>
        </resource>
        <handlers>
            <handler class="org.wso2.carbon.apimgt.gateway.handlers.ext.APIManagerCacheExtensionHandler"/>
            <handler class="org.wso2.carbon.apimgt.gateway.handlers.common.SynapsePropertiesHandler"/>
        </handlers>
    </api>
    <api context="/authorize" name="_WSO2AMAuthorizeAPI_">
        <resource faultSequence="_token_fault_" methods="GET" url-mapping="/*">
            <inSequence>
                <property expression="get-property('keyManager.port')" name="uri.var.portnum"/>
                <property
                        expression="get-property('keyManager.hostname')" name="uri.var.hostname"/>
                <send>
                    <endpoint>
                        <http uri-template="https://{uri.var.hostname}:{uri.var.portnum}/oauth2/authorize">
                            <timeout>
                                <duration>60000</duration>
                                <responseAction>fault</responseAction>
                            </timeout>
                        </http>
                    </endpoint>
                </send>
            </inSequence>
            <outSequence>
                <send/>
            </outSequence>
        </resource>
        <handlers>
            <handler class="org.wso2.carbon.apimgt.gateway.handlers.common.SynapsePropertiesHandler"/>
        </handlers>
    </api>

    <api context="/userinfo" name="_WSO2AMUserInfoAPI_">
        <resource faultSequence="_token_fault_" methods="GET" url-mapping="/*">
            <inSequence>
                <property expression="get-property('keyManager.port')" name="uri.var.portnum"/>
                <property
                        expression="get-property('keyManager.hostname')" name="uri.var.hostname"/>
                <send>
                    <endpoint>
                        <http uri-template="https://{uri.var.hostname}:{uri.var.portnum}/oauth2/userinfo">
                            <timeout>
                                <duration>60000</duration>
                                <responseAction>fault</responseAction>
                            </timeout>
                        </http>
                    </endpoint>
                </send>
            </inSequence>
            <outSequence>
                <send/>
            </outSequence>
        </resource>
        <handlers>
            <handler class="org.wso2.carbon.apimgt.gateway.handlers.common.SynapsePropertiesHandler"/>
        </handlers>
    </api>
    <api context="/revoke" name="_WSO2AMRevokeAPI_">
        <resource faultSequence="_token_fault_" methods="POST" url-mapping="/*">
            <inSequence>
                <property expression="get-property('keyManager.port')" name="uri.var.portnum"/>
                <property
                        expression="get-property('keyManager.hostname')" name="uri.var.hostname"/>
                <send>
                    <endpoint>
                        <http uri-template="https://{uri.var.hostname}:{uri.var.portnum}/oauth2/revoke">
                            <timeout>
                                <duration>60000</duration>
                                <responseAction>fault</responseAction>
                            </timeout>
                        </http>
                    </endpoint>
                </send>
            </inSequence>
            <outSequence>
                <send/>
            </outSequence>
        </resource>
        <handlers>
            <handler class="org.wso2.carbon.apimgt.gateway.handlers.ext.APIManagerCacheExtensionHandler"/>
            <handler class="org.wso2.carbon.apimgt.gateway.handlers.common.SynapsePropertiesHandler"/>
        </handlers>
    </api>
    <!-- You can add any flat sequences, endpoints, etc.. to this synapse.xml file if you do
    *not* want to keep the artifacts in several files -->

    <api xmlns="http://ws.apache.org/ns/synapse"
         name="status_code_200_API"
         context="/response200" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://ws.apache.org/ns/synapse ">
        <resource methods="GET POST" url-mapping="/*">
            <inSequence>
                <property name="HTTP_SC" value="200" scope="axis2"/>
                <header name="To" action="remove"/>
                <property name="RESPONSE" value="true" scope="default" type="STRING"/>
                <payloadFactory media-type="json">
                    <format>
                        {"employees":[
                        {"firstName":"John", "lastName":"Doe"},
                        {"firstName":"Anna", "lastName":"Smith"},
                        {"firstName":"Peter", "lastName":"Jones"}
                        ]}
                    </format>
                </payloadFactory>
                <send/>
            </inSequence>
        </resource>
    </api>
</definitions>
